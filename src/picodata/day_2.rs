fn check_parenthesis(s: String) -> bool {
    let mut stack = vec![];
    for c in s.chars() {
        match c {
            '(' => {
                stack.push(')');
            }
            '{' => {
                stack.push('}');
            }
            '[' => {
                stack.push(']');
            }
            ')' | '}' | ']' => {
                if let Some(e) = stack.pop() {
                    if e != c {
                        return false;
                    }
                } else {
                    return false;
                }
            }
            _ => {}
        }
    }
    stack.is_empty()
}

/*# Capture the flag

// https://www.notion.so/Capture-the-flag-a5bdf847551f4aeaa39278c14990a29c

<aside>
üí° –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Solution Engineer
</aside>

**–õ–µ–≥–µ–Ω–¥–∞:** –ù–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞–∑–∞–¥ –ø–æ–¥—Ä—è–¥—á–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –Ω–∞—Å —Å—É–ø–µ—Ä–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä `supercalc`.
–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ã –∏–º —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –∏ —Å—á–∏—Ç–∞–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã, –Ω–æ –≤—á–µ—Ä–∞ "*–≤—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç*".

**–ó–∞–¥–∞—á–∞:** –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤—ã–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é.*/
fn capture_the_flag() {}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_check_parenthesis() {
        println!("{}", check_parenthesis("([()]{()})".to_string())); // true
        println!("{}", check_parenthesis("[(12()()()()32)]{}".to_string())); // true
        println!("{}", check_parenthesis("[(])".to_string())); // false
        println!("{}", check_parenthesis("123(2[3]1)3".to_string())); // true
        println!(
            "{}",
            check_parenthesis("123dasd!@(2[3()]1)3dzz___31299000()".to_string())
        ); // true
        println!("{}", check_parenthesis("]".to_string())); // false
    }
}
